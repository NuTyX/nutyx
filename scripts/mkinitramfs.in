#!/bin/bash
# This file based in part on the mkinitrafms script for the LFS LiveCD
# written by Alexander E. Patrakov and Jeremy Huntwork.
# adapted by Thierry Nuttens for NuTyX

copyModules() {
local MODULES
MODULES="/lib/modules/$KERNEL_VERSION/kernel/crypto \
     /lib/modules/$KERNEL_VERSION/kernel/fs \
     /lib/modules/$KERNEL_VERSION/kernel/lib \
     /lib/modules/$KERNEL_VERSION/kernel/drivers/scsi\
     /lib/modules/$KERNEL_VERSION/kernel/drivers/message \
     /lib/modules/$KERNEL_VERSION/kernel/drivers/pcmcia \
     /lib/modules/$KERNEL_VERSION/kernel/drivers/virtio \
     /lib/modules/$KERNEL_VERSION/kernel/drivers/md
     /lib/modules/$KERNEL_VERSION/kernel/drivers/ata
     /lib/modules/$KERNEL_VERSION/kernel/drivers/block
     /lib/modules/$KERNEL_VERSION/kernel/drivers/firewire
     /lib/modules/$KERNEL_VERSION/kernel/drivers/mmc
     /lib/modules/$KERNEL_VERSION/kernel/drivers/cdrom  \
     /lib/modules/$KERNEL_VERSION/kernel/drivers/usb/host \
     /lib/modules/$KERNEL_VERSION/kernel/drivers/usb/storage \
     /lib/modules/$KERNEL_VERSION/kernel/drivers/usb/core \
     /lib/modules/$KERNEL_VERSION/kernel/drivers/usb/common"

printf "Copying $(find $MODULES -type f | wc -l) modules...\n"
find $MODULES -type f 2> /dev/null | $CPIO --make-directories -p  $WDIR 2> /dev/null

mkdir -p $WDIR/lib/modules/$KERNEL_VERSION
for i in builtin order
do
   cp /lib/modules/$KERNEL_VERSION/modules.$i \
   $WDIR/lib/modules/$KERNEL_VERSION
done
depmod -b $WDIR $KERNEL_VERSION
}

copyFirmwares()
{
  cp -a /lib/firmware/rtlwifi \
  $WDIR/lib/firmware > /dev/null 2>&1
  cp -a /lib/firmware/ath6k \
  $WDIR/lib/firmware > /dev/null 2>&1
  cp -a /lib/firmware/RTL8192E \
  $WDIR/lib/firmware > /dev/null 2>&1
  cp -a /lib/firmware/bnx2x-* \
  $WDIR/lib/firmware > /dev/null 2>&1
  cp -a /lib/firmware/brcm \
  $WDIR/lib/firmware > /dev/null 2>&1
  cp -a /lib/firmware/iwlwifi-* \
  $WDIR/lib/firmware > /dev/null 2>&1
  cp -a /lib/firmware/radeon \
  $WDIR/lib/firmware > /dev/null 2>&1
  cp -a /lib/firmware/ar3k \
  $WDIR/lib/firmware > /dev/null 2>&1
}
copy()
{
  local file

  if [ "$2" == "lib" ]; then
    file=$(PATH=/lib:/lib/systemd:/usr/lib type -p $1)
  else
    file=$(type -p $1)
  fi

  if [ -n $file ] ; then
    cp $file $WDIR/$2
  else
    echo "Missing required file: $1 for directory $2"
    rm -rf $WDIR
    exit 1
  fi
}

#
##
### Start Here

BUSYBOX=$(which busybox)
CPIO=$(which cpio)
DATADIR=/lib/services
INITIN=init.in

# Create temporaries working directories
WDIR=$(mktemp -d /tmp/initrd-work.XXXXXXXXXX)
unsorted=$(mktemp /tmp/unsorted.XXXXXXXXXX)

# Create base directory structure
for DIR in bin dev lib run sbin sys proc tmp etc usr
do
   mkdir -p $WDIR/$DIR
done
for DIR in lsb firmware udev
do
   mkdir -p $WDIR/lib/$DIR
done
for DIR in bin sbin lib share
do
   mkdir -p $WDIR/usr/$DIR
done
for DIR in sysconfig modprobe.d udev
do
   mkdir -p $WDIR/etc/$DIR
done
for DIR in rules.d hwdb.d
do
   mkdir -p $WDIR/lib/udev/$DIR
   mkdir -p $WDIR/etc/udev/$DIR
done
touch $WDIR/etc/modprobe.d/modprobe.conf
[ -d /lib64 ] && cp -a /lib64 $WDIR/lib64

KERNEL_VERSION="$(uname -r)"
if [ -z $1 ]; then
	if [ ! -d /lib/modules/${KERNEL_VERSION} ]; then
		echo "Error you didn't specify any kernel version !!
The /lib/modules/${KERNEL_VERSION} directory not exist !!"

	else
		echo "Warning you didn't specify any kernel version !!
Will try to make for ${KERNEL_VERSION}. If not,"
	fi
	echo "
==> Please choose one from following kernel(s) version(s):
"
	ls  /lib/modules
	echo ""
	[ ! -d /lib/modules/${KERNEL_VERSION} ] && exit 1
else
	KERNEL_VERSION=$1
fi

INITRAMFS_FILE=initrd-${KERNEL_VERSION}

printf "Creating $INITRAMFS_FILE... \n"

if [ -n "$KERNEL_VERSION" ] && [ ! -d "/lib/modules/$1" ] ; then
  echo "No /lib/modules/$1 directory"
  exit 1
fi

copyFirmwares

sbinfiles="udevd udevadm"

##  Optional files and locations need bash
##   so that ldd can find librairies
if [ -x /sbin/lvm ] || [ -x /usr/sbin/cryptsetup ] || [ -x /sbin/mdadm ]; then
	if ! [ -x /bin/bash ]; then
		echo "bash needs to be installed !!!"
		exit 1
	fi

fi
#
# Add mdadm if present
if [ -x /sbin/mdadm ];then
	if [ -z $BUSYBOX ];then
		sbinfiles="$sbinfiles mdadm"
	else
		cp /sbin/mdadm $WDIR/sbin/mdadm
		/bin/bash ldd /sbin/mdadm | sed "s/\t//" | cut -d " " -f1 >> $unsorted
	fi
#
# Copy the RAID configuration file if present
   [ -f /etc/mdadm.conf ] && cp /etc/mdadm.conf $WDIR/etc
fi
#
# Add lvm if present
if [ -x /sbin/lvm ]; then
	if [ -z $BUSYBOX ]; then
		sbinfiles="$sbinfiles lvm dmsetup"
	else
		for I in lvm dmsetup
		do
			cp /sbin/$I $WDIR/sbin/$I
			/bin/bash ldd /sbin/$I | sed "s/\t//" | cut -d " " -f1 >> $unsorted
		done
	fi
	ln -s lvm $WDIR/sbin/lvchange
	ln -s lvm $WDIR/sbin/lvrename
	ln -s lvm $WDIR/sbin/lvextend
	ln -s lvm $WDIR/sbin/lvcreate
	ln -s lvm $WDIR/sbin/lvdisplay
	ln -s lvm $WDIR/sbin/lvscan

	ln -s lvm $WDIR/sbin/pvchange
	ln -s lvm $WDIR/sbin/pvck
	ln -s lvm $WDIR/sbin/pvcreate
	ln -s lvm $WDIR/sbin/pvdisplay
	ln -s lvm $WDIR/sbin/pvscan

	ln -s lvm $WDIR/sbin/vgchange
	ln -s lvm $WDIR/sbin/vgcreate
	ln -s lvm $WDIR/sbin/vgscan
	ln -s lvm $WDIR/sbin/vgrename
	ln -s lvm $WDIR/sbin/vgck

	# Conf file(s)
	cp -a /etc/lvm $WDIR/etc
fi
#
# Add cryptsetup if present
if [ -x /usr/sbin/cryptsetup ]; then
	if [ -z $BUSYBOX ]; then
		usrsbinfiles="$usrsbinfiles cryptsetup"
	else
		cp /usr/sbin/cryptsetup $WDIR/usr/sbin/cryptsetup
		/bin/bash ldd /usr/sbin/cryptsetup | sed "s/\t//" | cut -d " " -f1 >> $unsorted
	fi
	if [ -f /root/.crypto/keyfile.bin ]; then
		mkdir -p $WDIR/root/.crypto
		cp /root/.crypto/keyfile.bin $WDIR/root/.crypto
	fi
fi


# Install the init-functions
if [ ! -f /lib/lsb/init-functions ]; then
	echo "ERROR cannot find /lib/lsb/init-functions file !!!"
	exit 1
fi

cp /lib/lsb/init-functions $WDIR/lib/lsb/init-functions

cp /etc/group $WDIR/etc
cp /etc/passwd $WDIR/etc

# echo and false are a bit wird
if [ -z $BUSYBOX ];then
	cp /bin/echo $WDIR/bin/echo
	cp /bin/false $WDIR/bin/false
else
	cp $BUSYBOX $WDIR/$BUSYBOX
	for LINK in $($BUSYBOX  --list)
	do
		[ "$LINK" == "$(basename $BUSYBOX)" ] && continue
		[ "$LINK" == "init" ] && continue
		ln -s $BUSYBOX $WDIR/sbin/$LINK
	done
	if [ -d /etc/mdev.d ]; then
		[ -f /etc/mdev.conf ] && \
		cp /etc/mdev.conf $WDIR/etc
		cp -a /etc/mdev.d $WDIR/etc/mdev.d
	fi
	ln -s $BUSYBOX $WDIR/bin/sh
fi
# terminal stuff
mkdir -p $WDIR/usr/share/terminfo/l
cp /usr/share/terminfo/l/linux \
 $WDIR/usr/share/terminfo/l/

# Install the udev configuration files
[ -f /etc/udev/udev.conf ] && cp /etc/udev/udev.conf $WDIR/etc/udev/udev.conf
for file in $(find /lib/udev/rules.d/ -type f) ; do
	cp $file $WDIR/lib/udev/rules.d
done
for file in $(find /lib/udev/hwdb.d/ -type f) ; do
	cp $file $WDIR/lib/udev/hwdb.d
done
cat > $WDIR/etc/udev/rules.d/55-lfs.rules << "EOF"
# /etc/udev/rules.d/55-lfs.rules: Rule definitions for LFS.

# Core kernel devices

# This causes the system clock to be set as soon as /dev/rtc becomes available.
SUBSYSTEM=="rtc", ACTION=="add", MODE="0644", RUN="do_start_clock"
KERNEL=="rtc", ACTION=="add", MODE="0644", RUN="do_start_clock"

# Comms devices

KERNEL=="ippp[0-9]*",       GROUP="dialout"
KERNEL=="isdn[0-9]*",       GROUP="dialout"
KERNEL=="isdnctrl[0-9]*",   GROUP="dialout"
KERNEL=="dcbri[0-9]*",      GROUP="dialout"
EOF


# Clock setting
[ -f /etc/sysconfig/clock ] && cp /etc/sysconfig/clock $WDIR/etc/sysconfig

# Install the init file
install -m0755 $DATADIR/$INITIN $WDIR/init

if [ -x /bin/kmod ] ; then
	binfiles="$binfiles kmod"
fi

# Install basic binaries
for f in $usrbinfiles; do
	if [ -z $BUSYBOX ]; then
		ldd /usr/bin/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
		copy $f usr/bin
	fi
done
# Install more binaries

for f in $usrsbinfiles; do
	ldd /usr/sbin/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
	copy $f usr/sbin
done

for f in $binfiles ; do
	ldd /bin/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
	copy $f bin
done

for f in $sbinfiles ; do
	ldd /sbin/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
	copy $f sbin
done

if [ -x /bin/kmod ] ; then
	ln -s kmod $WDIR/bin/lsmod
	ln -s kmod $WDIR/bin/insmod
	ln -s kmod $WDIR/bin/modprobe
	ln -s kmod $WDIR/bin/depmod
fi

# Install libraries
sort $unsorted | uniq | while read library ; do
  if [ "$library" == "linux-vdso.so.1" ] ||
     [ "$library" == "linux-gate.so.1" ]; then
    continue
  fi

  copy $library lib
done
if [ -z $BUSYBOX ]; then
	cp -a /lib/udev $WDIR/lib

	# The Hardware clock setting maybe could be faster done
	cat > $WDIR/lib/udev/do_start_clock << "EOF"
#!/bin/sh -e
. /lib/lsb/init-functions
do_start_clock
EOF
	chmod 755 $WDIR/lib/udev/do_start_clock
fi

###  Install requested $KERNEL_VERSION kernel modules
[ -z ${KERNEL_VERSION} ] || copyModules

rm -f /boot/$INITRAMFS_FILE

( cd $WDIR ; find . | $CPIO -o -H newc --quiet | gzip -9 ) > $INITRAMFS_FILE

# Remove the temporary direc
rm -rf $WDIR $unsorted
mv $INITRAMFS_FILE /boot/$INITRAMFS_FILE

printf "done.\n"
